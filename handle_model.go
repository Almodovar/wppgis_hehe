package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"os/exec"
	"strconv"

	"github.com/julienschmidt/httprouter"
	_ "github.com/mattn/go-sqlite3"
)

type BMPCodeFeature struct {
	FeatureID int
	BMPCode   int
}

type BMPCodeHRU struct {
	HRUID   int
	BMPCode int
}

type BMPCode struct {
	FeatureID int
	BMPCode   int
}

func HandleModelRun(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {

	var err error
	var d []BMPCodeFeature

	var x []BMPCodeHRU
	var BMPCodeArray [518]int
	var BMPCodeHRUString string

	for i := 0; i < len(BMPCodeArray); i++ {
		BMPCodeArray[i] = 1
	}

	err = json.NewDecoder(r.Body).Decode(&d)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}

	fmt.Println(d[0].FeatureID)
	fmt.Println(d[0].BMPCode)

	dbSpatial, err := sql.Open("sqlite3", "./assets/swat/spatial.db3")
	checkErr(err)

	for _, i := range d {
		var id = i.FeatureID
		var bmpCode = i.BMPCode

		rows, err := dbSpatial.Query("SELECT subbasin, HRUSWATIndex FROM hru_subbasin")
		checkErr(err)

		for rows.Next() {
			var subbasinID int
			var hruID int
			err = rows.Scan(&subbasinID, &hruID)
			checkErr(err)

			if subbasinID == id {
				var a BMPCodeHRU
				a.BMPCode = bmpCode
				a.HRUID = hruID
				fmt.Println(a.HRUID)
				x = append(x, a)
				BMPCodeArray[hruID-1] = bmpCode
			}
		}
	}

	websString := "Input file generated by WEBsInterface, University of Guelph \r\n" +
		"518    | Total HRU number \r\n" +
		"32   | Total WASCoB number \r\n" +
		"Scenario Database \r\n" +
		"C:\\xxKun_Learn\\Go\\Go\\src\\wppgis\\assets\\swat\\RESULT\\test.db3 \r\n" +
		"Scenario type (1: historic; 2: conventional; 3: user define) \r\n" +
		"3 \r\n" +
		"WASCoBs (RES file code for all WASCoBs. Only operating in user define scenario. 0: without WASCoB; 1: with WASCoB) \r\n" +
		"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 \r\n" +
		"Scenario input (MGT file code for all HRUs. Only operating in user define scenario.1: historic; 2: conventional; 3: conservation tillage; 4: NMAN; 5: cover crop; 6: conservation tillage + NMAN; 7: conservation tillage + cover crop; 8: NMAN + cover crop; 9: conservation tillage + NMAN + cover crop)\r\n "

	for i := 0; i < len(BMPCodeArray); i++ {
		BMPCodeHRUString = BMPCodeHRUString + strconv.Itoa(BMPCodeArray[i]) + " "
	}
	websString = websString + BMPCodeHRUString

	f, err := os.Create("./assets/swat/webs.webs")
	checkErr(err)

	defer f.Close()

	fmt.Println(websString)

	err = ioutil.WriteFile("./assets/swat/webs2.webs", []byte(websString), 0644)
	if err != nil {
		panic(err)
	}
	_, err = f.WriteString(websString)
	checkErr(err)

	done := make(chan bool, 1)
	go func() {
		// Chdir("C:/xxKun_Learn/Go/Go/src/wppgis/assets/swat")

		cmd := exec.Command("SWAT_abca_150524")
		cmd.Dir = "C:/xxKun_Learn/Go/Go/src/wppgis/assets/swat"
		cmd.Run()
		done <- true

	}()

	fmt.Println("awaiting")

	<-done
	fmt.Println("done")

	a, err := json.Marshal(BMPCodeArray)
	w.Write(a)

}

func checkErr(err error) {
	if err != nil {
		panic(err)
	}
}
